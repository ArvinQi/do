type AggregateDevice {
  count: Int!
}

type AggregateDo {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Device {
  id: ID!
  name: String!
}

type DeviceConnection {
  pageInfo: PageInfo!
  edges: [DeviceEdge]!
  aggregate: AggregateDevice!
}

input DeviceCreateInput {
  name: String!
}

type DeviceEdge {
  node: Device!
  cursor: String!
}

enum DeviceOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DevicePreviousValues {
  id: ID!
  name: String!
}

type DeviceSubscriptionPayload {
  mutation: MutationType!
  node: Device
  updatedFields: [String!]
  previousValues: DevicePreviousValues
}

input DeviceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DeviceWhereInput
  AND: [DeviceSubscriptionWhereInput!]
  OR: [DeviceSubscriptionWhereInput!]
  NOT: [DeviceSubscriptionWhereInput!]
}

input DeviceUpdateInput {
  name: String
}

input DeviceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [DeviceWhereInput!]
  OR: [DeviceWhereInput!]
  NOT: [DeviceWhereInput!]
}

input DeviceWhereUniqueInput {
  id: ID
}

type Do {
  id: ID!
  title: String!
  description: String
  createTime: DateTime
  user: User!
}

type DoConnection {
  pageInfo: PageInfo!
  edges: [DoEdge]!
  aggregate: AggregateDo!
}

input DoCreateInput {
  title: String!
  description: String
  createTime: DateTime
  user: UserCreateOneInput!
}

type DoEdge {
  node: Do!
  cursor: String!
}

enum DoOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  createTime_ASC
  createTime_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DoPreviousValues {
  id: ID!
  title: String!
  description: String
  createTime: DateTime
}

type DoSubscriptionPayload {
  mutation: MutationType!
  node: Do
  updatedFields: [String!]
  previousValues: DoPreviousValues
}

input DoSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DoWhereInput
  AND: [DoSubscriptionWhereInput!]
  OR: [DoSubscriptionWhereInput!]
  NOT: [DoSubscriptionWhereInput!]
}

input DoUpdateInput {
  title: String
  description: String
  createTime: DateTime
  user: UserUpdateOneRequiredInput
}

input DoWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createTime: DateTime
  createTime_not: DateTime
  createTime_in: [DateTime!]
  createTime_not_in: [DateTime!]
  createTime_lt: DateTime
  createTime_lte: DateTime
  createTime_gt: DateTime
  createTime_gte: DateTime
  user: UserWhereInput
  AND: [DoWhereInput!]
  OR: [DoWhereInput!]
  NOT: [DoWhereInput!]
}

input DoWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createDevice(data: DeviceCreateInput!): Device!
  updateDevice(data: DeviceUpdateInput!, where: DeviceWhereUniqueInput!): Device
  updateManyDevices(data: DeviceUpdateInput!, where: DeviceWhereInput): BatchPayload!
  upsertDevice(where: DeviceWhereUniqueInput!, create: DeviceCreateInput!, update: DeviceUpdateInput!): Device!
  deleteDevice(where: DeviceWhereUniqueInput!): Device
  deleteManyDevices(where: DeviceWhereInput): BatchPayload!
  createDo(data: DoCreateInput!): Do!
  updateDo(data: DoUpdateInput!, where: DoWhereUniqueInput!): Do
  updateManyDoes(data: DoUpdateInput!, where: DoWhereInput): BatchPayload!
  upsertDo(where: DoWhereUniqueInput!, create: DoCreateInput!, update: DoUpdateInput!): Do!
  deleteDo(where: DoWhereUniqueInput!): Do
  deleteManyDoes(where: DoWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  device(where: DeviceWhereUniqueInput!): Device
  devices(where: DeviceWhereInput, orderBy: DeviceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Device]!
  devicesConnection(where: DeviceWhereInput, orderBy: DeviceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DeviceConnection!
  do(where: DoWhereUniqueInput!): Do
  does(where: DoWhereInput, orderBy: DoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Do]!
  doesConnection(where: DoWhereInput, orderBy: DoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DoConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  device(where: DeviceSubscriptionWhereInput): DeviceSubscriptionPayload
  do(where: DoSubscriptionWhereInput): DoSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  theme: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  theme: String
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  theme_ASC
  theme_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  theme: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  theme: String
}

input UserUpdateInput {
  name: String
  theme: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  theme: String
  theme_not: String
  theme_in: [String!]
  theme_not_in: [String!]
  theme_lt: String
  theme_lte: String
  theme_gt: String
  theme_gte: String
  theme_contains: String
  theme_not_contains: String
  theme_starts_with: String
  theme_not_starts_with: String
  theme_ends_with: String
  theme_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
